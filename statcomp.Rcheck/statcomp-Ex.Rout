
R version 3.0.2 (2013-09-25) -- "Frisbee Sailing"
Copyright (C) 2013 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin10.8.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "statcomp"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('statcomp')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("MPR_complexity")
> ### * MPR_complexity
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: MPR_complexity
> ### Title: A function to compute the MPR-complexity
> ### Aliases: MPR_complexity
> 
> ### ** Examples
> 
> x = arima.sim(model=list(ar = 0.3), n = 10^4)
> opd = ordinal_pattern_distribution(x = x, ndemb = 6)
> MPR_complexity(opd)
[1] 0.03714999
> 
> 
> 
> cleanEx()
> nameEx("changePermCodingOPD")
> ### * changePermCodingOPD
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: changePermCodingOPD
> ### Title: A function to change the ordering scheme of ordinal patterns
> ### Aliases: changePermCodingOPD
> 
> ### ** Examples
> 
> x = arima.sim(model=list(ar = 0.3), n = 10^4)
> opd = ordinal_pattern_distribution(x = x, ndemb = 6)
> 
> 
> 
> cleanEx()
> nameEx("fisher_information")
> ### * fisher_information
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: fisher_information
> ### Title: A function to compute the Fisher-information
> ### Aliases: fisher_information
> 
> ### ** Examples
> 
> x = arima.sim(model=list(ar = 0.3), n = 10^4)
> opd = ordinal_pattern_distribution(x = x, ndemb = 6)
> fisher_information(opd = opd)
Warning in if (is.na(opd)) { :
  the condition has length > 1 and only the first element will be used
[1] 0.02471475
> 
> 
> 
> cleanEx()
> nameEx("generateCodingScheme")
> ### * generateCodingScheme
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: generateCodingScheme
> ### Title: A function to generate a variety of permutation coding schemes
> ### Aliases: generateCodingScheme
> 
> ### ** Examples
> 
> generateCodingScheme(target_pattern = "lehmerperm", ndemb = 4)
[1] "lehmerperm has been succesfully generated!"
      [,1] [,2] [,3] [,4]
 [1,]    0    1    2    3
 [2,]    0    1    3    2
 [3,]    0    2    1    3
 [4,]    0    2    3    1
 [5,]    0    3    1    2
 [6,]    0    3    2    1
 [7,]    1    0    2    3
 [8,]    1    0    3    2
 [9,]    1    2    0    3
[10,]    1    2    3    0
[11,]    1    3    0    2
[12,]    1    3    2    0
[13,]    2    0    1    3
[14,]    2    0    3    1
[15,]    2    1    0    3
[16,]    2    1    3    0
[17,]    2    3    0    1
[18,]    2    3    1    0
[19,]    3    0    1    2
[20,]    3    0    2    1
[21,]    3    1    0    2
[22,]    3    1    2    0
[23,]    3    2    0    1
[24,]    3    2    1    0
> 
> 
> 
> cleanEx()
> nameEx("global_complexity")
> ### * global_complexity
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: global_complexity
> ### Title: A function to compute global information and complexity measures
> ###   for time series
> ### Aliases: global_complexity
> 
> ### ** Examples
> 
> x = arima.sim(model=list(ar = 0.3), n = 10^4)
> global_complexity(x = x, ndemb = 6)
        PE    MPR_Cjs  nforbiden 
0.98413890 0.03714999 0.00000000 
> # or:
> opd = ordinal_pattern_distribution(x = x, ndemb = 6)
> global_complexity(opd = opd, ndemb = 6)
Warning in if (is.na(opd)) { :
  the condition has length > 1 and only the first element will be used
        PE    MPR_Cjs  nforbiden 
0.98413890 0.03714999 0.00000000 
> 
> 
> 
> cleanEx()
> nameEx("hellinger_distance")
> ### * hellinger_distance
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: hellinger_distance
> ### Title: Distance measure between ordinal pattern distributions:
> ###   Hellinger distance
> ### Aliases: hellinger_distance
> 
> ### ** Examples
> 
> hellinger_distance(p=ordinal_pattern_distribution(rnorm(10000), ndemb = 5), q= ordinal_pattern_distribution(arima.sim(model=list(ar=0.9), n= 10000), ndemb = 5))
[1] 0.2918835
> 
> 
> 
> cleanEx()
> nameEx("local_complexity")
> ### * local_complexity
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: local_complexity
> ### Title: A function to compute local information measures for time series
> ### Aliases: local_complexity
> 
> ### ** Examples
> 
> x = arima.sim(model=list(ar = 0.3), n = 10^4)
> local_complexity(x = x, ndemb = 6)
                 fis_lehmerperm                  fis_kellerperm 
                     0.02773590                      0.03108175 
fis_lehmerperm_bitflip_adjusted fis_kellerperm_bitflip_adjusted 
                     0.02767921                      0.03985915 
  fis_lehmerperm_jumps_adjusted   fis_kellerperm_jumps_adjusted 
                     0.02018237                      0.02043645 
        fis_lehmerperm_Olivares         fis_kellerperm_Olivares 
                     0.02689886                      0.02471475 
> # or:
> opd = ordinal_pattern_distribution(x = x, ndemb = 6)
> local_complexity(opd = opd, ndemb = 6)
Warning in if (is.na(opd)) { :
  the condition has length > 1 and only the first element will be used
                 fis_lehmerperm                  fis_kellerperm 
                     0.02773590                      0.03108175 
fis_lehmerperm_bitflip_adjusted fis_kellerperm_bitflip_adjusted 
                     0.02767921                      0.03985915 
  fis_lehmerperm_jumps_adjusted   fis_kellerperm_jumps_adjusted 
                     0.02018237                      0.02043645 
        fis_lehmerperm_Olivares         fis_kellerperm_Olivares 
                     0.02689886                      0.02471475 
> 
> 
> 
> cleanEx()
> nameEx("ordinal_pattern_distribution")
> ### * ordinal_pattern_distribution
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ordinal_pattern_distribution
> ### Title: A function to compute ordinal pattern statistics
> ### Aliases: ordinal_pattern_distribution
> 
> ### ** Examples
> 
> x = arima.sim(model=list(ar = 0.3), n = 10^4)
> ordinal_pattern_distribution(x = x, ndemb = 6)
  [1] 30 35 23 24 12 11 20 18 30 34 13 16 19 14 22 25 21 16 11 14 15 14 34 23 12
 [26]  5 10  7 12 14 30 20 18 17 17  8 13 10 13 16 25 11 22 15 16 19 19 20 11 14
 [51] 14 21 27 19 16  9  9 16 19 24 26 11 10  8 13 12 11 11  8 13  8  9 13 14 15
 [76] 13 15 23 10 11 15 21 15 27  9 16 12 15 16 25 11 11  8  7  7  9 16  9 10  9
[101]  4 14  9  9  9 11  8 15 16  5 12 14 10 16 11 16 18 22 28 33 23 26 24 19  9
[126] 12 27 13 24 10 10  9 14  7  8 12 16 15  6 14  7  8 20 14  7  7  8  8 17 20
[151] 17 13 14  8 13 13 13 12  3  4  6 13  7  3  9 13  8 10 13  9  4  7 16 12 10
[176] 11  5 11 21 23 24 21 17 12  8  7 11  8  7  7  6 12 13 10 12  9 19 18 12  7
[201] 15  7 12 13 13  9 12 19 20 29 19  9  9 11  6  4 18 13  2 10 10 10  9 10 10
[226] 12  8 11 17 18 20 20  8 28 11 19 20 17 27 30 21 21 21 14 12 10 20 10 21  6
[251]  8  9  9  9  6  8  7  8 11  4  6  8  9 12 12  5 11  6 14 18 13 20  8 14  6
[276] 10 10  6  7  8  8  9 14  4  9  6  8  7  6  9  6  7 10 14  8  7 10 16 11 15
[301] 25 16 12 15  6 11 12  5  7 15 11  9 18  9 11  7  6 21 11 13 10 12 16 16  9
[326] 12 14 12 25 25 21 21  8  9  7  9 13 13 12 10 19 13 17 22 19 21 19 13 17 13
[351] 29 24 22 27 13 19 20 35 32 29 30 29 35 32 18 10 24 26 21 26 15 21 17 10 20
[376] 18 23 21  9 12 17 15 20 15  5 12  8  7  7 16 24 26 19 19  4 13 13  8 15 16
[401]  9 11 20  9 25 16  9 15  8  9 12  8 10 19 11  8  6  8 19 14 22 10  9  9 12
[426] 15 15 10  9  4  6  5  8  7 10  4  8 13 15  7  5 11  6 10  7 11 11 11 21 23
[451] 15 11 11  4  9  9  9  6  5  6  6 15 14  5  5  9  9 10 11 13  9  9 12 15 15
[476] 12 10 21 24 16 21 25 23 12 14 13 25 19 17 14 11 16 20 12  8 17 10 15 15 13
[501]  5 13  7 12  8  9  8 14 12 21 27 19 17 16 13  6 13 14  6  8 10  8 15  6  5
[526] 11 10 12 10 10  6  6  6  8 10  7 14  7 21 20 16 23  7  8  8  6 14  7  7  9
[551]  9  8 17 12  6  5  6 16 12 12  7  9  6 19  6  7 10 12 15 17 23 16 11  8  5
[576] 11 11 13 14  6 14 12 12  9 12 10 11 11 15 21  9 13 24 13 17 13 15 23 28 32
[601] 33 36 17 16 13  8 23 15 13 15 13 14 15 16  6  8 14 10  7 13  8 10  6 15  9
[626]  6  7  7  8 13 36 19 16 12 14  8 16 25 15 19 16  8 13  7 12 13 15 14 17 19
[651]  8 12 12 18 15 10  8 13 14 13 20 19 14 13 15  5 18 15 20 20 16 20 18 27 16
[676] 20  9 21 14 16 15 19 12 12 11 23 17 18 20 37 18 15 13  9 10 11 27 14 14 17
[701] 13 11 19 27 24 22 21 19 14 16 29 25 29 23 14 13 22 33 31 29
> 
> 
> 
> cleanEx()
> nameEx("permutation_entropy")
> ### * permutation_entropy
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: permutation_entropy
> ### Title: A function to compute the permutation entropy
> ### Aliases: permutation_entropy
> 
> ### ** Examples
> 
> x = arima.sim(model=list(ar = 0.3), n = 10^4)
> opd = ordinal_pattern_distribution(x = x, ndemb = 6)
